
from Crypto.Util.number import long_to_bytes, inverse
from sympy import factorint

# RSAのパラメータ
n = 105270965659728963158005445847489568338624133794432049687688451306125971661031124713900002127418051522303660944175125387034394970179832138699578691141567745433869339567075081508781037210053642143165403433797282755555668756795483577896703080883972479419729546081868838801222887486792028810888791562604036658927
e = 137
c1 = 16725879353360743225730316963034204726319861040005120594887234855326369831320755783193769090051590949825166249781272646922803585636193915974651774390260491016720214140633640783231543045598365485211028668510203305809438787364463227009966174262553328694926283315238194084123468757122106412580182773221207234679

# 因数分解
factors = factorint(n)
p, q = list(factors.keys())

# phiの計算
phi = (p - 1) * (q - 1)

# RSA秘密鍵の計算
d = inverse(e, phi)
key_bytes = long_to_bytes(pow(c1, d, n))

print("Recovered key:", key_bytes)

